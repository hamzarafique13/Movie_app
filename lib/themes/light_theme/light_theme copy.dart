import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
// import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getLightThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      appBarTheme: const AppBarTheme(
        systemOverlayStyle: SystemUiOverlayStyle.dark,
      ),
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.inversePrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.deepPurple5003,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getLightThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary,
          // fontSize: 16.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          // fontSize: 14.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 12.fSize,
          fontFamily: 'Araboto-Normal',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 34.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          // fontSize: 33.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          // fontSize: 28.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 25.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          // fontSize: 20.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.pink200,
          // fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF181F55),
    primaryContainer: Color(0XFFD4618F),
    inversePrimary: Color(0XFFF6F5FE),

    // Error colors
    errorContainer: Color(0XFF5E419D),
    onErrorContainer: Color(0X7EFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFE9C33D),
    onPrimaryContainer: Color(0X6C181F55),

    secondary: Color(0xffebeaf6),
    secondaryContainer: Color(0xffFFFFFF),

    tertiary: Color(0xffffcee2),
    onTertiary: Color(0xffa6dfff),
    onTertiaryContainer: Color(0xffe7e1ff),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFCBE5F3);
  Color get blue10001 => Color(0XFFBFE8FF);
  Color get blue400 => Color(0XFF3C9ACE);
  Color get blue700 => Color(0XFF188ACA);

  // BlueGray
  Color get blueGray20099 => Color(0X99BCBECD);
  Color get blueGray400 => Color(0XFF8387AA);
  Color get blueGray500 => Color(0XFF686D94);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD8C6FC);
  Color get deepPurple10001 => Color(0XFFC1B3F9);
  Color get deepPurple300 => Color(0XFF8E7FC9);
  Color get deepPurple30001 => Color(0XFF8B7ACE);
  Color get deepPurple50 => Color(0XFFE7E1FF);
  Color get deepPurple5000 => Color(0X00EDEBFF);
  Color get deepPurple5001 => Color(0XFFEEE9FF);
  Color get deepPurple5002 => Color(0XFFEAE7FF);
  Color get deepPurple5003 => Color(0XFFEAE8FD);
  Color get deepPurple5004 => Color(0XFFEAE7FC);
  Color get deepPurpleA100 => Color(0XFFAF8DF4);
  Color get deepPurpleA200 => Color(0XFF9747FF);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray400 => Color(0XFFC1C1C1);
  Color get gray50 => Color(0XFFFFFAFA);
  Color get gray5001 => Color(0XFFF5F5FD);
  Color get gray5002 => Color(0XFFF6F5FE);
  Color get gray5003 => Color(0XFFF7F6FF);
  Color get gray900 => Color(0XFF102631);

  Color get lightPurpledarkMode => Color(0xff262e5e);
  Color get purpleDarkMode => Color(0XFF181f55);

  // Indigo
  Color get indigo200 => Color(0XFFA7ABC9);
  Color get indigo300 => Color(0XFF8990C7);
  Color get indigo50 => Color(0XFFE3E2F1);
  Color get indigoA100 => Color(0XFF96A2FF);

  // LightBlue
  Color get lightBlue100 => Color(0XFFA5DFFF);
  Color get lightBlue300 => Color(0XFF5BC0F8);

  // Pink
  Color get pink200 => Color(0XFFEE8BB3);
  Color get pink50 => Color(0XFFFFE1ED);
  Color get pinkA100 => Color(0XFFE877A5);

  // Red
  Color get red100 => Color(0XFFFFCEE1);
  Color get red300 => Color(0XFFEA757E);
  Color get red400 => Color(0XFFEB5545);

  // Yellow
  Color get yellow100 => Color(0XFFFFF4CF);
  Color get yellow700 => Color(0XFFE8C33D);
  Color get yellow800 => Color(0XFFD6AC19);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get lightTheme => ThemeHelper().themeData();
