import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
// import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.inversePrimary,
      appBarTheme:
          const AppBarTheme(systemOverlayStyle: SystemUiOverlayStyle.light),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            // borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            // width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            // borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary.withOpacity(0.1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary,
          // fontSize: 16.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          // fontSize: 14.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 12.fSize,
          fontFamily: 'Araboto-Light',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 34.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          // fontSize: 28.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          // fontSize: 25.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          // fontSize: 20.fSize,
          fontFamily: 'Araboto-Bold',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.pink200,
          // fontSize: 14,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.dark(
    // Primary colors
    inversePrimary: Color(0XFF181f55),
    primaryContainer: Color(0XFF5E419D),
    // Text Color in Dark Mode
    primary: Color(0XFFFFFFFF),

    // Error colors
    errorContainer: Color(0XFF96A2FF),
    onErrorContainer: Color(0X6C181F55),

    // On colors(text colors)
    onPrimary: Color(0XFF262D5E),
    onPrimaryContainer: Color(0X75FFFFFF),

    secondary: Color(0xff242a5e),
    secondaryContainer: Color(0xff262e5e),

    tertiary: Color(0xff73334d),
    onTertiary: Color(0xff144865),
    onTertiaryContainer: Color(0xff423575),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Blue
  Color get blue400 => Color(0XFF3C9ACE);

  // BlueGray
  Color get blueGray20099 => Color(0X99BCBECD);
  Color get blueGray300 => Color(0XFF999CB5);
  Color get blueGray400 => Color(0XFF8387AA);
  Color get blueGray500 => Color(0XFF6E718D);
  Color get blueGray700 => Color(0XFF3F467C);

  // Cyan
  Color get cyan900 => Color(0XFF144865);
  Color get cyan90001 => Color(0XFF134764);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD8C6FC);
  Color get deepPurple300 => Color(0XFF8E7FC9);
  Color get deepPurple50 => Color(0XFFEAE8FD);
  Color get deepPurpleA100 => Color(0XFFAF8DF4);
  Color get deepPurpleA200 => Color(0XFF9747FF);

  // Gray
  Color get gray50 => Color(0XFFF6F5FE);
  Color get gray800 => Color(0XFF61562B);
  Color get gray900 => Color(0XFF102631);

  // Indigo
  Color get indigo200 => Color(0XFFA7ABC9);
  Color get indigo800 => Color(0XFF423474);
  Color get indigo80001 => Color(0XFF373F79);
  Color get indigo80002 => Color(0XFF423575);
  Color get indigo900 => Color(0XFF242B60);
  Color get indigo90001 => Color(0XFF2B3268);

  // LightBlue
  Color get lightBlue300 => Color(0XFF5BC0F8);

  // Pink
  Color get pink200 => Color(0XFFEE8BB3);
  Color get pink900 => Color(0XFF72334C);
  Color get pink90001 => Color(0XFF73334D);
  Color get pinkA100 => Color(0XFFE877A5);

  // Red
  Color get red300 => Color(0XFFEA757E);
  Color get red400 => Color(0XFFEB5545);

  // Yellow
  Color get yellow700 => Color(0XFFE8C33D);
  Color get yellow70001 => Color(0XFFE9C33D);
  Color get yellow800 => Color(0XFFD6AC19);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get darkTheme => ThemeHelper().themeData();
